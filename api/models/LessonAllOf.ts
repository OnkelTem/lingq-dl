/* tslint:disable */
/* eslint-disable */
/**
 * Lingq.com API
 * HTTP API for lingq.com
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues, getByKey } from '../runtime';
import { Card, CardFromJSON, CardFromJSONTyped, CardToJSON } from './Card';
import {
  CollectionTeaser,
  CollectionTeaserFromJSON,
  CollectionTeaserFromJSONTyped,
  CollectionTeaserToJSON,
} from './CollectionTeaser';
import {
  TokenizedTextItem,
  TokenizedTextItemFromJSON,
  TokenizedTextItemFromJSONTyped,
  TokenizedTextItemToJSON,
} from './TokenizedTextItem';
import { Word, WordFromJSON, WordFromJSONTyped, WordToJSON } from './Word';

/**
 *
 * @export
 * @interface LessonAllOf
 */
export interface LessonAllOf {
  /**
   *
   * @type {string}
   * @memberof LessonAllOf
   */
  notes: string | null;
  /**
   *
   * @type {CollectionTeaser}
   * @memberof LessonAllOf
   */
  collection: CollectionTeaser;
  /**
   *
   * @type {Array<Array<TokenizedTextItem>>}
   * @memberof LessonAllOf
   */
  tokenizedText: Array<Array<TokenizedTextItem>>;
  /**
   *
   * @type {string}
   * @memberof LessonAllOf
   */
  classicUrl: string;
  /**
   *
   * @type {string}
   * @memberof LessonAllOf
   */
  sharedByImageUrl: string;
  /**
   *
   * @type {boolean}
   * @memberof LessonAllOf
   */
  sharedByIsFriend: boolean;
  /**
   *
   * @type {boolean}
   * @memberof LessonAllOf
   */
  promotedCourse: boolean | null;
  /**
   *
   * @type {string}
   * @memberof LessonAllOf
   */
  printUrl: string;
  /**
   *
   * @type {boolean}
   * @memberof LessonAllOf
   */
  canEdit: boolean;
  /**
   *
   * @type {boolean}
   * @memberof LessonAllOf
   */
  canEditSentence: boolean;
  /**
   *
   * @type {number}
   * @memberof LessonAllOf
   */
  nextLessonId: number | null;
  /**
   *
   * @type {number}
   * @memberof LessonAllOf
   */
  previousLessonId: number | null;
  /**
   *
   * @type {string}
   * @memberof LessonAllOf
   */
  videoUrl: string | null;
  /**
   *
   * @type {number}
   * @memberof LessonAllOf
   */
  cardsCount: number;
  /**
   *
   * @type {object}
   * @memberof LessonAllOf
   */
  bookmark: object;
  /**
   *
   * @type {boolean}
   * @memberof LessonAllOf
   */
  isLegacy: boolean;
  /**
   *
   * @type {{ [key: string]: Word; }}
   * @memberof LessonAllOf
   */
  words: { [key: string]: Word };
  /**
   *
   * @type {{ [key: string]: Card; }}
   * @memberof LessonAllOf
   */
  cards: { [key: string]: Card };
}

export function LessonAllOfFromJSON(json: any): LessonAllOf {
  return LessonAllOfFromJSONTyped(json, false);
}

export function LessonAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): LessonAllOf {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    notes: getByKey('LessonAllOf', json, 'notes', true, true),
    collection: CollectionTeaserFromJSON(json['collection']),
    tokenizedText: getByKey('LessonAllOf', json, 'tokenizedText', true, false),
    classicUrl: getByKey('LessonAllOf', json, 'classicUrl', true, false),
    sharedByImageUrl: getByKey('LessonAllOf', json, 'sharedByImageUrl', true, false),
    sharedByIsFriend: getByKey('LessonAllOf', json, 'sharedByIsFriend', true, false),
    promotedCourse: getByKey('LessonAllOf', json, 'promotedCourse', true, true),
    printUrl: getByKey('LessonAllOf', json, 'printUrl', true, false),
    canEdit: getByKey('LessonAllOf', json, 'canEdit', true, false),
    canEditSentence: getByKey('LessonAllOf', json, 'canEditSentence', true, false),
    nextLessonId: getByKey('LessonAllOf', json, 'nextLessonId', true, true),
    previousLessonId: getByKey('LessonAllOf', json, 'previousLessonId', true, true),
    videoUrl: getByKey('LessonAllOf', json, 'videoUrl', true, true),
    cardsCount: getByKey('LessonAllOf', json, 'cardsCount', true, false),
    bookmark: getByKey('LessonAllOf', json, 'bookmark', true, false),
    isLegacy: getByKey('LessonAllOf', json, 'isLegacy', true, false),
    words: mapValues(json['words'], WordFromJSON),
    cards: mapValues(json['cards'], CardFromJSON),
  };
}

export function LessonAllOfToJSON(value?: LessonAllOf | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    notes: value.notes,
    collection: CollectionTeaserToJSON(value.collection),
    tokenizedText: value.tokenizedText,
    classicUrl: value.classicUrl,
    sharedByImageUrl: value.sharedByImageUrl,
    sharedByIsFriend: value.sharedByIsFriend,
    promotedCourse: value.promotedCourse,
    printUrl: value.printUrl,
    canEdit: value.canEdit,
    canEditSentence: value.canEditSentence,
    nextLessonId: value.nextLessonId,
    previousLessonId: value.previousLessonId,
    videoUrl: value.videoUrl,
    cardsCount: value.cardsCount,
    bookmark: value.bookmark,
    isLegacy: value.isLegacy,
    words: mapValues(value.words, WordToJSON),
    cards: mapValues(value.cards, CardToJSON),
  };
}
