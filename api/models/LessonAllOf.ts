/* tslint:disable */
/* eslint-disable */
/**
 * Lingq.com API
 * HTTP API for lingq.com
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Card,
    CardFromJSON,
    CardFromJSONTyped,
    CardToJSON,
    CollectionTeaser,
    CollectionTeaserFromJSON,
    CollectionTeaserFromJSONTyped,
    CollectionTeaserToJSON,
    TokenizedTextItem,
    TokenizedTextItemFromJSON,
    TokenizedTextItemFromJSONTyped,
    TokenizedTextItemToJSON,
    Word,
    WordFromJSON,
    WordFromJSONTyped,
    WordToJSON,
} from './';

/**
 * 
 * @export
 * @interface LessonAllOf
 */
export interface LessonAllOf {
    /**
     * 
     * @type {string}
     * @memberof LessonAllOf
     */
    notes: string | null;
    /**
     * 
     * @type {CollectionTeaser}
     * @memberof LessonAllOf
     */
    collection: CollectionTeaser;
    /**
     * 
     * @type {Array<Array<TokenizedTextItem>>}
     * @memberof LessonAllOf
     */
    tokenizedText: Array<Array<TokenizedTextItem>>;
    /**
     * 
     * @type {string}
     * @memberof LessonAllOf
     */
    classicUrl: string;
    /**
     * 
     * @type {number}
     * @memberof LessonAllOf
     */
    timestamp: number;
    /**
     * 
     * @type {string}
     * @memberof LessonAllOf
     */
    sharedByImageUrl: string;
    /**
     * 
     * @type {boolean}
     * @memberof LessonAllOf
     */
    sharedByIsFriend: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LessonAllOf
     */
    promotedCourse: boolean;
    /**
     * 
     * @type {string}
     * @memberof LessonAllOf
     */
    printUrl: string;
    /**
     * 
     * @type {boolean}
     * @memberof LessonAllOf
     */
    canEdit: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LessonAllOf
     */
    canEditSentence: boolean;
    /**
     * 
     * @type {number}
     * @memberof LessonAllOf
     */
    nextLessonId: number;
    /**
     * 
     * @type {number}
     * @memberof LessonAllOf
     */
    previousLessonId: number;
    /**
     * 
     * @type {string}
     * @memberof LessonAllOf
     */
    videoUrl: string | null;
    /**
     * 
     * @type {number}
     * @memberof LessonAllOf
     */
    cardsCount: number;
    /**
     * 
     * @type {object}
     * @memberof LessonAllOf
     */
    bookmark: object;
    /**
     * 
     * @type {boolean}
     * @memberof LessonAllOf
     */
    isLegacy: boolean;
    /**
     * 
     * @type {{ [key: string]: Word; }}
     * @memberof LessonAllOf
     */
    words: { [key: string]: Word; };
    /**
     * 
     * @type {{ [key: string]: Card; }}
     * @memberof LessonAllOf
     */
    cards: { [key: string]: Card; };
}

export function LessonAllOfFromJSON(json: any): LessonAllOf {
    return LessonAllOfFromJSONTyped(json, false);
}

export function LessonAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): LessonAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'notes': json['notes'],
        'collection': CollectionTeaserFromJSON(json['collection']),
        'tokenizedText': json['tokenizedText'],
        'classicUrl': json['classicUrl'],
        'timestamp': json['timestamp'],
        'sharedByImageUrl': json['sharedByImageUrl'],
        'sharedByIsFriend': json['sharedByIsFriend'],
        'promotedCourse': json['promotedCourse'],
        'printUrl': json['printUrl'],
        'canEdit': json['canEdit'],
        'canEditSentence': json['canEditSentence'],
        'nextLessonId': json['nextLessonId'],
        'previousLessonId': json['previousLessonId'],
        'videoUrl': json['videoUrl'],
        'cardsCount': json['cardsCount'],
        'bookmark': json['bookmark'],
        'isLegacy': json['isLegacy'],
        'words': (mapValues(json['words'], WordFromJSON)),
        'cards': (mapValues(json['cards'], CardFromJSON)),
    };
}

export function LessonAllOfToJSON(value?: LessonAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'notes': value.notes,
        'collection': CollectionTeaserToJSON(value.collection),
        'tokenizedText': value.tokenizedText,
        'classicUrl': value.classicUrl,
        'timestamp': value.timestamp,
        'sharedByImageUrl': value.sharedByImageUrl,
        'sharedByIsFriend': value.sharedByIsFriend,
        'promotedCourse': value.promotedCourse,
        'printUrl': value.printUrl,
        'canEdit': value.canEdit,
        'canEditSentence': value.canEditSentence,
        'nextLessonId': value.nextLessonId,
        'previousLessonId': value.previousLessonId,
        'videoUrl': value.videoUrl,
        'cardsCount': value.cardsCount,
        'bookmark': value.bookmark,
        'isLegacy': value.isLegacy,
        'words': (mapValues(value.words, WordToJSON)),
        'cards': (mapValues(value.cards, CardToJSON)),
    };
}

