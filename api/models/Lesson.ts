/* tslint:disable */
/* eslint-disable */
/**
 * Lingq.com API
 * HTTP API for lingq.com
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues, getByKey } from '../runtime';
import { Card, CardFromJSON, CardFromJSONTyped, CardToJSON } from './Card';
import {
  CollectionTeaser,
  CollectionTeaserFromJSON,
  CollectionTeaserFromJSONTyped,
  CollectionTeaserToJSON,
} from './CollectionTeaser';
import { LessonAllOf, LessonAllOfFromJSON, LessonAllOfFromJSONTyped, LessonAllOfToJSON } from './LessonAllOf';
import { LessonTeaser, LessonTeaserFromJSON, LessonTeaserFromJSONTyped, LessonTeaserToJSON } from './LessonTeaser';
import {
  TokenizedTextItem,
  TokenizedTextItemFromJSON,
  TokenizedTextItemFromJSONTyped,
  TokenizedTextItemToJSON,
} from './TokenizedTextItem';
import { Word, WordFromJSON, WordFromJSONTyped, WordToJSON } from './Word';

/**
 *
 * @export
 * @interface Lesson
 */
export interface Lesson {
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  contentId: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  collectionId: number;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  collectionTitle: string;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  originalUrl: string | null;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  imageUrl: string;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  originalImageUrl: string;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  providerImageUrl: string;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  description: string;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  duration: number;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  audio: string;
  /**
   *
   * @type {boolean}
   * @memberof Lesson
   */
  audioPending: boolean;
  /**
   *
   * @type {Date}
   * @memberof Lesson
   */
  pubDate: Date;
  /**
   *
   * @type {Date}
   * @memberof Lesson
   */
  sharedDate: Date | null;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  sharedByName: string;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  giveRoseUrl: string;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  wordCount: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  uniqueWordCount: number;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  externalType: string | null;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  type: LessonTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  status: string;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  pos: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  price: number;
  /**
   *
   * @type {boolean}
   * @memberof Lesson
   */
  opened: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Lesson
   */
  completed: boolean;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  percentCompleted: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  newWordsCount: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  difficulty: number;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  providerName: string;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  providerDescription: string;
  /**
   *
   * @type {Date}
   * @memberof Lesson
   */
  lastRoseReceived: Date;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  lessonRating: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  lessonVotes: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  audioRating: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  audioVotes: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  rosesCount: number;
  /**
   *
   * @type {boolean}
   * @memberof Lesson
   */
  isFavorite: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Lesson
   */
  isOverLimit: boolean | null;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  level: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Lesson
   */
  tags: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  providerUrl: string;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  readTimes: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  listenTimes: number;
  /**
   *
   * @type {boolean}
   * @memberof Lesson
   */
  roseGiven: boolean;
  /**
   *
   * @type {Date}
   * @memberof Lesson
   */
  openDate: Date;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  viewsCount: number;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  isProtected: number | null;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  notes: string | null;
  /**
   *
   * @type {CollectionTeaser}
   * @memberof Lesson
   */
  collection: CollectionTeaser;
  /**
   *
   * @type {Array<Array<TokenizedTextItem>>}
   * @memberof Lesson
   */
  tokenizedText: Array<Array<TokenizedTextItem>>;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  classicUrl: string;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  sharedByImageUrl: string;
  /**
   *
   * @type {boolean}
   * @memberof Lesson
   */
  sharedByIsFriend: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Lesson
   */
  promotedCourse: boolean | null;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  printUrl: string;
  /**
   *
   * @type {boolean}
   * @memberof Lesson
   */
  canEdit: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Lesson
   */
  canEditSentence: boolean;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  nextLessonId: number | null;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  previousLessonId: number | null;
  /**
   *
   * @type {string}
   * @memberof Lesson
   */
  videoUrl: string | null;
  /**
   *
   * @type {number}
   * @memberof Lesson
   */
  cardsCount: number;
  /**
   *
   * @type {object}
   * @memberof Lesson
   */
  bookmark: object;
  /**
   *
   * @type {boolean}
   * @memberof Lesson
   */
  isLegacy: boolean;
  /**
   *
   * @type {{ [key: string]: Word; }}
   * @memberof Lesson
   */
  words: { [key: string]: Word };
  /**
   *
   * @type {{ [key: string]: Card; }}
   * @memberof Lesson
   */
  cards: { [key: string]: Card };
}

/**
 * @export
 * @enum {string}
 */
export enum LessonTypeEnum {
  Lesson = 'lesson',
}

export function LessonFromJSON(json: any): Lesson {
  return LessonFromJSONTyped(json, false);
}

export function LessonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Lesson {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: getByKey('Lesson', json, 'id', true, false),
    contentId: getByKey('Lesson', json, 'contentId', true, false),
    collectionId: getByKey('Lesson', json, 'collectionId', true, false),
    collectionTitle: getByKey('Lesson', json, 'collectionTitle', true, false),
    url: getByKey('Lesson', json, 'url', true, false),
    originalUrl: getByKey('Lesson', json, 'originalUrl', true, true),
    imageUrl: getByKey('Lesson', json, 'imageUrl', true, false),
    originalImageUrl: getByKey('Lesson', json, 'originalImageUrl', true, false),
    providerImageUrl: getByKey('Lesson', json, 'providerImageUrl', true, false),
    title: getByKey('Lesson', json, 'title', true, false),
    description: getByKey('Lesson', json, 'description', true, false),
    duration: getByKey('Lesson', json, 'duration', true, false),
    audio: getByKey('Lesson', json, 'audio', true, false),
    audioPending: getByKey('Lesson', json, 'audioPending', true, false),
    pubDate: new Date(json['pubDate']),
    sharedDate: json['sharedDate'] === null ? null : new Date(json['sharedDate']),
    sharedByName: getByKey('Lesson', json, 'sharedByName', true, false),
    giveRoseUrl: getByKey('Lesson', json, 'giveRoseUrl', true, false),
    wordCount: getByKey('Lesson', json, 'wordCount', true, false),
    uniqueWordCount: getByKey('Lesson', json, 'uniqueWordCount', true, false),
    externalType: getByKey('Lesson', json, 'external_type', true, true),
    type: getByKey('Lesson', json, 'type', true, false),
    status: getByKey('Lesson', json, 'status', true, false),
    pos: getByKey('Lesson', json, 'pos', true, false),
    price: getByKey('Lesson', json, 'price', true, false),
    opened: getByKey('Lesson', json, 'opened', true, false),
    completed: getByKey('Lesson', json, 'completed', true, false),
    percentCompleted: getByKey('Lesson', json, 'percentCompleted', true, false),
    newWordsCount: getByKey('Lesson', json, 'newWordsCount', true, false),
    difficulty: getByKey('Lesson', json, 'difficulty', true, false),
    providerName: getByKey('Lesson', json, 'providerName', true, false),
    providerDescription: getByKey('Lesson', json, 'providerDescription', true, false),
    lastRoseReceived: new Date(json['lastRoseReceived']),
    lessonRating: getByKey('Lesson', json, 'lessonRating', true, false),
    lessonVotes: getByKey('Lesson', json, 'lessonVotes', true, false),
    audioRating: getByKey('Lesson', json, 'audioRating', true, false),
    audioVotes: getByKey('Lesson', json, 'audioVotes', true, false),
    rosesCount: getByKey('Lesson', json, 'rosesCount', true, false),
    isFavorite: getByKey('Lesson', json, 'isFavorite', true, false),
    isOverLimit: getByKey('Lesson', json, 'isOverLimit', true, true),
    level: getByKey('Lesson', json, 'level', true, false),
    tags: getByKey('Lesson', json, 'tags', true, false),
    providerUrl: getByKey('Lesson', json, 'providerUrl', true, false),
    readTimes: getByKey('Lesson', json, 'readTimes', true, false),
    listenTimes: getByKey('Lesson', json, 'listenTimes', true, false),
    roseGiven: getByKey('Lesson', json, 'roseGiven', true, false),
    openDate: new Date(json['openDate']),
    viewsCount: getByKey('Lesson', json, 'viewsCount', true, false),
    isProtected: getByKey('Lesson', json, 'isProtected', true, true),
    notes: getByKey('Lesson', json, 'notes', true, true),
    collection: CollectionTeaserFromJSON(json['collection']),
    tokenizedText: getByKey('Lesson', json, 'tokenizedText', true, false),
    classicUrl: getByKey('Lesson', json, 'classicUrl', true, false),
    sharedByImageUrl: getByKey('Lesson', json, 'sharedByImageUrl', true, false),
    sharedByIsFriend: getByKey('Lesson', json, 'sharedByIsFriend', true, false),
    promotedCourse: getByKey('Lesson', json, 'promotedCourse', true, true),
    printUrl: getByKey('Lesson', json, 'printUrl', true, false),
    canEdit: getByKey('Lesson', json, 'canEdit', true, false),
    canEditSentence: getByKey('Lesson', json, 'canEditSentence', true, false),
    nextLessonId: getByKey('Lesson', json, 'nextLessonId', true, true),
    previousLessonId: getByKey('Lesson', json, 'previousLessonId', true, true),
    videoUrl: getByKey('Lesson', json, 'videoUrl', true, true),
    cardsCount: getByKey('Lesson', json, 'cardsCount', true, false),
    bookmark: getByKey('Lesson', json, 'bookmark', true, false),
    isLegacy: getByKey('Lesson', json, 'isLegacy', true, false),
    words: mapValues(json['words'], WordFromJSON),
    cards: mapValues(json['cards'], CardFromJSON),
  };
}

export function LessonToJSON(value?: Lesson | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    contentId: value.contentId,
    collectionId: value.collectionId,
    collectionTitle: value.collectionTitle,
    url: value.url,
    originalUrl: value.originalUrl,
    imageUrl: value.imageUrl,
    originalImageUrl: value.originalImageUrl,
    providerImageUrl: value.providerImageUrl,
    title: value.title,
    description: value.description,
    duration: value.duration,
    audio: value.audio,
    audioPending: value.audioPending,
    pubDate: value.pubDate.toISOString(),
    sharedDate: value.sharedDate === null ? null : value.sharedDate.toISOString(),
    sharedByName: value.sharedByName,
    giveRoseUrl: value.giveRoseUrl,
    wordCount: value.wordCount,
    uniqueWordCount: value.uniqueWordCount,
    external_type: value.externalType,
    type: value.type,
    status: value.status,
    pos: value.pos,
    price: value.price,
    opened: value.opened,
    completed: value.completed,
    percentCompleted: value.percentCompleted,
    newWordsCount: value.newWordsCount,
    difficulty: value.difficulty,
    providerName: value.providerName,
    providerDescription: value.providerDescription,
    lastRoseReceived: value.lastRoseReceived.toISOString(),
    lessonRating: value.lessonRating,
    lessonVotes: value.lessonVotes,
    audioRating: value.audioRating,
    audioVotes: value.audioVotes,
    rosesCount: value.rosesCount,
    isFavorite: value.isFavorite,
    isOverLimit: value.isOverLimit,
    level: value.level,
    tags: value.tags,
    providerUrl: value.providerUrl,
    readTimes: value.readTimes,
    listenTimes: value.listenTimes,
    roseGiven: value.roseGiven,
    openDate: value.openDate.toISOString(),
    viewsCount: value.viewsCount,
    isProtected: value.isProtected,
    notes: value.notes,
    collection: CollectionTeaserToJSON(value.collection),
    tokenizedText: value.tokenizedText,
    classicUrl: value.classicUrl,
    sharedByImageUrl: value.sharedByImageUrl,
    sharedByIsFriend: value.sharedByIsFriend,
    promotedCourse: value.promotedCourse,
    printUrl: value.printUrl,
    canEdit: value.canEdit,
    canEditSentence: value.canEditSentence,
    nextLessonId: value.nextLessonId,
    previousLessonId: value.previousLessonId,
    videoUrl: value.videoUrl,
    cardsCount: value.cardsCount,
    bookmark: value.bookmark,
    isLegacy: value.isLegacy,
    words: mapValues(value.words, WordToJSON),
    cards: mapValues(value.cards, CardToJSON),
  };
}
