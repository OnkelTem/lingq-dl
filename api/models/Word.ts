/* tslint:disable */
/* eslint-disable */
/**
 * Lingq.com API
 * HTTP API for lingq.com
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    WordHint,
    WordHintFromJSON,
    WordHintFromJSONTyped,
    WordHintToJSON,
} from './';

/**
 * 
 * @export
 * @interface Word
 */
export interface Word {
    /**
     * 
     * @type {number}
     * @memberof Word
     */
    importance: number;
    /**
     * 
     * @type {string}
     * @memberof Word
     */
    text: string;
    /**
     * 
     * @type {string}
     * @memberof Word
     */
    status: WordStatusEnum;
    /**
     * 
     * @type {Array<WordHint>}
     * @memberof Word
     */
    hints?: Array<WordHint>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Word
     */
    tags: Array<string>;
}

/**
* @export
* @enum {string}
*/
export enum WordStatusEnum {
    Known = 'known',
    Card = 'card'
}

export function WordFromJSON(json: any): Word {
    return WordFromJSONTyped(json, false);
}

export function WordFromJSONTyped(json: any, ignoreDiscriminator: boolean): Word {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'importance': json['importance'],
        'text': json['text'],
        'status': json['status'],
        'hints': !exists(json, 'hints') ? undefined : ((json['hints'] as Array<any>).map(WordHintFromJSON)),
        'tags': json['tags'],
    };
}

export function WordToJSON(value?: Word | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'importance': value.importance,
        'text': value.text,
        'status': value.status,
        'hints': value.hints === undefined ? undefined : ((value.hints as Array<any>).map(WordHintToJSON)),
        'tags': value.tags,
    };
}

