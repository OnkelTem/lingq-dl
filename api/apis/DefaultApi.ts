/* tslint:disable */
/* eslint-disable */
/**
 * Lingq.com API
 * HTTP API for lingq.com
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Collection,
    CollectionFromJSON,
    CollectionToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Lesson,
    LessonFromJSON,
    LessonToJSON,
} from '../models';

export interface LangCollectionsIdGetRequest {
    lang: string;
    id: number;
}

export interface LangLessonsIdGetRequest {
    lang: string;
    id: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get collection data
     */
    async langCollectionsIdGetRaw(requestParameters: LangCollectionsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Collection>> {
        if (requestParameters.lang === null || requestParameters.lang === undefined) {
            throw new runtime.RequiredError('lang','Required parameter requestParameters.lang was null or undefined when calling langCollectionsIdGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling langCollectionsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/{lang}/collections/{id}`.replace(`{${"lang"}}`, encodeURIComponent(String(requestParameters.lang))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionFromJSON(jsonValue));
    }

    /**
     * Get collection data
     */
    async langCollectionsIdGet(requestParameters: LangCollectionsIdGetRequest, initOverrides?: RequestInit): Promise<Collection> {
        const response = await this.langCollectionsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get lessson data
     */
    async langLessonsIdGetRaw(requestParameters: LangLessonsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Lesson>> {
        if (requestParameters.lang === null || requestParameters.lang === undefined) {
            throw new runtime.RequiredError('lang','Required parameter requestParameters.lang was null or undefined when calling langLessonsIdGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling langLessonsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/{lang}/lessons/{id}`.replace(`{${"lang"}}`, encodeURIComponent(String(requestParameters.lang))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LessonFromJSON(jsonValue));
    }

    /**
     * Get lessson data
     */
    async langLessonsIdGet(requestParameters: LangLessonsIdGetRequest, initOverrides?: RequestInit): Promise<Lesson> {
        const response = await this.langLessonsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
